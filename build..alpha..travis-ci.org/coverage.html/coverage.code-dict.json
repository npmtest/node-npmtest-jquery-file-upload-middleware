{"/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/test.js":"/* istanbul instrument in package npmtest_jquery_file_upload_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/lib.npmtest_jquery_file_upload_middleware.js":"/* istanbul instrument in package npmtest_jquery_file_upload_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jquery_file_upload_middleware = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jquery_file_upload_middleware = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jquery-file-upload-middleware && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jquery_file_upload_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jquery_file_upload_middleware\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jquery_file_upload_middleware.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jquery_file_upload_middleware.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jquery_file_upload_middleware.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jquery_file_upload_middleware.__dirname + '/lib.npmtest_jquery_file_upload_middleware.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/node_modules/jquery-file-upload-middleware/index.js":"var _ = require('lodash'),\n    EventEmitter = require('events').EventEmitter,\n    os = require(\"os\");\n\nvar JqueryFileUploadMiddleware = function () {\n    EventEmitter.call(this);\n    // setting default options\n    this.options = this.prepareOptions({});\n};\nrequire('util').inherits(JqueryFileUploadMiddleware, EventEmitter);\n\nJqueryFileUploadMiddleware.prototype.prepareOptions = function (options) {\n    options = _.extend({\n        tmpDir: os.tmpdir(),\n        uploadDir: __dirname + '/public/files',\n        uploadUrl: '/files/',\n        maxPostSize: 11000000000, // 11 GB\n        minFileSize: 1,\n        maxFileSize: 10000000000, // 10 GB\n        acceptFileTypes: /.+/i,\n        imageTypes: /\\.(gif|jpe?g|png)$/i,\n        imageVersions: {\n//            thumbnail: {\n//                width: 80,\n//                height: 80\n//            }\n        },\n        accessControl: {\n            allowOrigin: '*',\n            allowMethods: 'OPTIONS, HEAD, GET, POST, PUT, DELETE'\n        }\n    }, options);\n\n    _.each(['uploadDir', 'uploadUrl'], function (key) {\n        if (!_.isFunction(options[key])) {\n            var originalValue = options[key];\n            options[key] = function () {\n                return originalValue\n            };\n        }\n    });\n\n    return options;\n}\n\nJqueryFileUploadMiddleware.prototype.configure = function (options) {\n    this.options = this.prepareOptions(options);\n};\n\nJqueryFileUploadMiddleware.prototype.fileHandler = function (options) {\n    return require('./lib/filehandler')(this, this.prepareOptions(_.extend(this.options, options)));\n};\n\nJqueryFileUploadMiddleware.prototype.fileManager = function (options) {\n    return require('./lib/filemanager')(this, this.prepareOptions(_.extend(this.options, options)));\n};\n\nmodule.exports = new JqueryFileUploadMiddleware();","/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/node_modules/jquery-file-upload-middleware/lib/filehandler.js":"module.exports = function (middleware, options) {\n\n    return function (req, res, next) {\n        res.set({\n            'Access-Control-Allow-Origin': options.accessControl.allowOrigin,\n            'Access-Control-Allow-Methods': options.accessControl.allowMethods\n        });\n        var UploadHandler = require('./uploadhandler')(options);\n        var handler = new UploadHandler(req, res, function (result, redirect) {\n            if (redirect) {\n                files = {files: result};\n                res.redirect(redirect.replace(/%s/, encodeURIComponent(JSON.stringify(files))));\n            } else {\n                res.set({\n                    'Content-Type': (req.headers.accept || '').indexOf('application/json') !== -1\n                        ? 'application/json'\n                        : 'text/plain'\n                });\n                res.status(200).json(result);\n            }\n        });\n\n        handler.on('begin', function (fileInfo) {\n            middleware.emit('begin', fileInfo, req, res);\n        });\n        handler.on('end', function (fileInfo) {\n            middleware.emit('end', fileInfo, req, res);\n        });\n        handler.on('abort', function (fileInfo) {\n            middleware.emit('abort', fileInfo, req, res);\n        });\n        handler.on('error', function (e) {\n            middleware.emit('abort', e, req, res);\n        });\n        handler.on('delete', function (fileName) {\n            middleware.emit('delete', fileName, req, res);\n        });\n\n        switch (req.method) {\n            case 'OPTIONS':\n                res.end();\n                break;\n            case 'HEAD':\n            case 'GET':\n                handler.get();\n                break;\n            case 'POST':\n                handler.post();\n                break;\n            case 'DELETE':\n                handler.destroy();\n                break;\n            default:\n                res.send(405);\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/node_modules/jquery-file-upload-middleware/lib/fileinfo.js":"var fs = require('fs'),\n    _ = require('lodash');\n\nmodule.exports = function (options) {\n\n    var FileInfo = function (file) {\n        this.name = file.name;\n        this.originalName = file.name;\n        this.size = file.size;\n        this.type = file.type;\n        this.deleteType = 'DELETE';\n    };\n\n    FileInfo.prototype.validate = function () {\n        if (options.minFileSize && options.minFileSize > this.size) {\n            this.error = 'File is too small';\n        } else if (options.maxFileSize && options.maxFileSize < this.size) {\n            this.error = 'File is too big';\n        } else if (!options.acceptFileTypes.test(this.name)) {\n            this.error = 'Filetype not allowed';\n        }\n        return !this.error;\n    };\n\n    FileInfo.prototype.safeName = function () {\n        // Prevent directory traversal and creating hidden system files:\n        this.name = require('path').basename(this.name).replace(/^\\.+/, '');\n        // Prevent overwriting existing files:\n        while (fs.existsSync(options.baseDir() + '/' + this.name)) {\n            this.name = this.name.replace(/(?:(?: \\(([\\d]+)\\))?(\\.[^.]+))?$/, function (s, index, ext) {\n                return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');\n            });\n        }\n    };\n\n    FileInfo.prototype.setUrl = function (type, baseUrl) {\n        var key = type ? type + 'Url' : 'url';\n        this[key] = baseUrl + '/' + encodeURIComponent(this.name);\n    }\n\n    return FileInfo;\n};","/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/node_modules/jquery-file-upload-middleware/lib/filemanager.js":"var _ = require('lodash'),\n    fs = require('fs'),\n    path = require('path'),\n    mkdirp = require('mkdirp');\n\nmodule.exports = function (middleware, options) {\n\n    options = _.extend({\n        targetDir: function () {\n            return options.uploadDir();\n        },\n        targetUrl: function () {\n            return options.uploadUrl();\n        }\n    }, options);\n\n    _.each(['targetDir', 'targetUrl'], function (key) {\n        if (!_.isFunction(options[key])) {\n            var originalValue = options[key];\n            options[key] = function () {\n                return originalValue\n            };\n        }\n    });\n\n    var FileManager = function () {\n    };\n\n    FileManager.prototype.getFiles = function (callback) {\n\n        var files = {};\n        var counter = 1;\n        var finish = function () {\n            if (!--counter)\n                callback(files);\n        };\n\n        fs.readdir(options.uploadDir(), _.bind(function (err, list) {\n            _.each(list, function (name) {\n                var stats = fs.statSync(options.uploadDir() + '/' + name);\n                if (stats.isFile()) {\n                    files[name] = {\n                        path: options.uploadDir() + '/' + name\n                    };\n                    _.each(options.imageVersions, function (value, version) {\n                        counter++;\n                        fs.exists(options.uploadDir() + '/' + version + '/' + name, function (exists) {\n                            if (exists)\n                                files[name][version] = options.uploadDir() + '/' + version + '/' + name;\n                            finish();\n                        });\n                    });\n                }\n            }, this);\n            finish();\n        }, this));\n    };\n\n    var safeName = function (dir, filename, callback) {\n        fs.exists(dir + '/' + filename, function (exists) {\n            if (exists) {\n                filename = filename.replace(/(?:(?: \\(([\\d]+)\\))?(\\.[^.]+))?$/, function (s, index, ext) {\n                    return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');\n                });\n                safeName(dir, filename, callback)\n            } else {\n                callback(filename);\n            }\n        });\n    };\n\n    var moveFile = function (source, target, callback) {\n        fs.rename(source, target, function (err) {\n            if (!err)\n                callback();\n            else {\n                var is = fs.createReadStream(source);\n                var os = fs.createWriteStream(target);\n                is.on('end', function (err) {\n                    if (!err) {\n                        fs.unlink(source, callback);\n                    } else {\n                        callback(err);\n                    }\n                });\n                is.pipe(os);\n            }\n        });\n    };\n\n    var move = function (source, targetDir, callback) {\n        fs.exists(targetDir, function (exists) {\n            if (!exists) {\n                mkdirp(targetDir, function (err) {\n                    if (err)\n                        callback(err);\n                    else\n                        move(source, targetDir, callback);\n                });\n            } else {\n                fs.stat(source, function (err, stat) {\n                    if (!err) {\n                        if (stat.isFile()) {\n                            safeName(targetDir, path.basename(source), function (safename) {\n                                moveFile(source, targetDir + '/' + safename, function (err) {\n                                    callback(err, safename);\n                                });\n                            });\n                        } else {\n                            callback(new Error(source + ' is not a file'));\n                        }\n                    } else {\n                        callback(err);\n                    }\n                });\n            }\n        });\n    };\n\n    FileManager.prototype.move = function (filename, targetDir, callback) {\n\n        var targetUrl;\n\n        // for safety\n        filename = path.basename(filename).replace(/^\\.+/, '');\n\n        if (!targetDir.match(/^\\//)) {\n            targetUrl = options.targetUrl()  + '/' + targetDir;\n            targetDir = options.targetDir() + '/' + targetDir;\n            relative = true;\n        }\n\n        fs.stat(options.uploadDir() + '/' + filename, function (err, stat) {\n            if (!err) {\n                if (stat.isFile()) {\n                    move(options.uploadDir() + '/' + filename, targetDir, function (err, safename) {\n                        if (err) {\n                            callback(err);\n                        } else {\n                            var urls = {\n                                filename: safename\n                            };\n\n                            var counter = 1;\n                            var finish = function (err) {\n                                if (err)\n                                    counter = 1;\n                                if (!--counter)\n                                    callback(err, err ? null : urls);\n                            };\n\n                            if (targetUrl)\n                                urls.url = targetUrl + '/' + safename;\n\n                            _.each(options.imageVersions, function (value, version) {\n                                counter++;\n                                fs.exists(options.uploadDir() + '/' + version + '/' + filename, function (exists) {\n                                    if (exists) {\n                                        move(options.uploadDir() + '/' + version + '/' + filename, targetDir + '/' + version + '/', function (err, safename) {\n                                            if (!err && relative)\n                                                urls[version + 'Url'] = targetUrl + '/' + version + '/' + safename;\n                                            finish(err);\n                                        });\n                                    }\n                                });\n                            });\n                            finish();\n                        }\n                    });\n                } else {\n                    callback(new Error('File not found'));\n                }\n            } else {\n                callback(err);\n            }\n        });\n    }\n\n    return new FileManager();\n};\n\n","/home/travis/build/npmtest/node-npmtest-jquery-file-upload-middleware/node_modules/jquery-file-upload-middleware/lib/uploadhandler.js":"var EventEmitter = require('events').EventEmitter,\n    path = require('path'),\n    fs = require('fs'),\n    formidable = require('formidable'),\n    imageMagick = require('imagemagick'),\n    mkdirp = require('mkdirp'),\n    _ = require('lodash'),\n    async = require('async');\n\nmodule.exports = function (options) {\n\n    var FileInfo = require('./fileinfo')(\n        _.extend({\n            baseDir: options.uploadDir\n        }, _.pick(options, 'minFileSize', 'maxFileSize', 'acceptFileTypes'))\n    );\n\n    var UploadHandler = function (req, res, callback) {\n        EventEmitter.call(this);\n        this.req = req;\n        this.res = res;\n        this.callback = callback;\n    };\n    require('util').inherits(UploadHandler, EventEmitter);\n\n    UploadHandler.prototype.noCache = function () {\n        this.res.set({\n            'Pragma': 'no-cache',\n            'Cache-Control': 'no-store, no-cache, must-revalidate'\n        });\n        if ((this.req.get(\"Accept\") || \"\").indexOf(\"application/json\") != -1) {\n            this.res.set({\n                'Content-Type': 'application/json',\n                'Content-Disposition': 'inline; filename=\"files.json\"'\n            });\n        } else {\n            this.res.set({ 'Content-Type': 'text/plain' });\n        }\n    };\n\n    UploadHandler.prototype.get = function () {\n        this.noCache();\n        var files = [];\n        fs.readdir(options.uploadDir(), _.bind(function (err, list) {\n            async.each(list, _.bind(function(name, cb) {\n                fs.stat(options.uploadDir() + '/' + name, _.bind(function(err, stats) {\n                    if (!err && stats.isFile()) {\n                        var fileInfo = new FileInfo({\n                            name: name,\n                            size: stats.size\n                        });\n                        this.initUrls(fileInfo, function(err) {\n                            files.push(fileInfo);\n                            cb(err);\n                        });\n                    }\n                    else cb(err);\n                }, this));\n            }, this),\n            _.bind(function(err) {\n                this.callback({files: files});\n            }, this));\n        }, this));\n    };\n\n    UploadHandler.prototype.post = function () {\n        var self = this,\n            form = new formidable.IncomingForm(),\n            tmpFiles = [],\n            files = [],\n            map = {},\n            counter = 1,\n            redirect,\n            finish = _.bind(function () {\n                if (!--counter) {\n                    async.each(files, _.bind(function(fileInfo, cb) {\n                        this.initUrls(fileInfo, _.bind(function(err) {\n                            this.emit('end', fileInfo);\n                            cb(err);\n                        }, this));\n                    }, this),\n                    _.bind(function(err) {\n                        this.callback({files: files}, redirect);\n                    }, this));\n                }\n            }, this);\n\n        this.noCache();\n\n        form.uploadDir = options.tmpDir;\n        form\n            .on('fileBegin', function (name, file) {\n                tmpFiles.push(file.path);\n                var fileInfo = new FileInfo(file);\n                fileInfo.safeName();\n                map[path.basename(file.path)] = fileInfo;\n                files.push(fileInfo);\n                self.emit('begin', fileInfo);\n            })\n            .on('field', function (name, value) {\n                if (name === 'redirect') {\n                    redirect = value;\n                }\n                if ( !self.req.fields )\n                    self.req.fields = {};\n                self.req.fields[name] = value;\n            })\n            .on('file', function (name, file) {\n                counter++;\n                var fileInfo = map[path.basename(file.path)];\n                fs.exists(file.path, function(exists) {\n                    if (exists) {\n                        fileInfo.size = file.size;\n                        if (!fileInfo.validate()) {\n                            fs.unlink(file.path);\n                            finish();\n                            return;\n                        }\n\n                        var generatePreviews = function () {\n                            if (options.imageTypes.test(fileInfo.name)) {\n                                _.each(options.imageVersions, function (value, version) {\n                                    counter++;\n                                    // creating directory recursive\n                                    mkdirp(options.uploadDir() + '/' + version + '/', function (err, made) {\n                                        var opts = options.imageVersions[version];\n                                        imageMagick.resize({\n                                            width: opts.width,\n                                            height: opts.height,\n                                            srcPath: options.uploadDir() + '/' + fileInfo.name,\n                                            dstPath: options.uploadDir() + '/' + version + '/' + fileInfo.name,\n                                            customArgs: opts.imageArgs || ['-auto-orient']\n                                        }, finish);\n                                    });\n                                });\n                            }\n                        }\n\n                        mkdirp(options.uploadDir() + '/', function(err, made) {\n                            fs.rename(file.path, options.uploadDir() + '/' + fileInfo.name, function (err) {\n                                if (!err) {\n                                    generatePreviews();\n                                    finish();\n                                } else {\n                                    var is = fs.createReadStream(file.path);\n                                    var os = fs.createWriteStream(options.uploadDir() + '/' + fileInfo.name);\n                                    is.on('end', function (err) {\n                                        if (!err) {\n                                            fs.unlink(file.path);\n                                            generatePreviews();\n                                        }\n                                        finish();\n                                    });\n                                    is.pipe(os);\n                                }\n                            });\n                        });\n                    }\n                    else finish();\n                });\n            })\n            .on('aborted', function () {\n                _.each(tmpFiles, function (file) {\n                    var fileInfo = map[path.basename(file)];\n                    self.emit('abort', fileInfo);\n                    fs.unlink(file);\n                });\n            })\n            .on('error', function (e) {\n                self.emit('error', e);\n            })\n            .on('progress', function (bytesReceived, bytesExpected) {\n                if (bytesReceived > options.maxPostSize)\n                    self.req.connection.destroy();\n            })\n            .on('end', finish)\n            .parse(self.req);\n    };\n\n    UploadHandler.prototype.destroy = function () {\n        var self = this,\n            fileName = path.basename(decodeURIComponent(this.req.url));\n\n        var filepath = path.join(options.uploadDir(), fileName);\n        if (filepath.indexOf(options.uploadDir()) !== 0) {\n            self.emit('delete', fileName);\n            self.callback({success: false});\n            return;\n        }\n        fs.unlink(filepath, function (ex) {\n            _.each(options.imageVersions, function (value, version) {\n                fs.unlink(path.join(options.uploadDir(), version, fileName));\n            });\n            self.emit('delete', fileName);\n            self.callback({success: !ex});\n        });\n    };\n\n    UploadHandler.prototype.initUrls = function (fileInfo, cb) {\n        var baseUrl = (options.ssl ? 'https:' : 'http:') + '//' + (options.hostname || this.req.get('Host'));\n        fileInfo.setUrl(null, baseUrl + options.uploadUrl());\n        fileInfo.setUrl('delete', baseUrl + this.req.originalUrl);\n        async.each(Object.keys(options.imageVersions), function(version, cb) {\n            fs.exists(options.uploadDir() + '/' + version + '/' + fileInfo.name, function(exists) {\n                if (exists) fileInfo.setUrl(version, baseUrl + options.uploadUrl() + '/' + version);\n                cb(null);\n            })\n        },\n        cb);\n    };\n\n    return UploadHandler;\n}\n\n"}